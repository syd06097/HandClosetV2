plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'HandCloset'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.projectlombok:lombok:1.18.26'
	runtimeOnly 'com.h2database:h2'
	compileOnly("org.springframework.boot:spring-boot-devtools")
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//   implementation 'com.googlecode.jopensurf:jopensurf:1.0.0'
//   implementation group: 'org.bytedeco', name: 'opencv-java', version: '4.8.0', classifier: 'natives-windows-x86_64'
//   implementation 'org.bytedeco:opencv-java:4.8.0:natives-windows-x86_64'
//   implementation files('build/libs/opencv-480.jar')
//   implementation fileTree(dir: 'libs', include: ['opencv4.8.0.jar'])
//   implementation 'org.opencv:opencv-java:4.8.0'
//   implementation 'org.openpnp:opencv:4.5.1-1'
//   implementation group: 'org.bytedeco', name: 'opencv-java', version: '4.8.0'
//   implementation group: 'org.bytedeco', name: 'javacv-platform', version: '1.5.9'
//   implementation group: 'org.openpnp', name: 'opencv', version: '4.5.1-1'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'com.auth0:java-jwt:3.10.3'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.security:spring-security-test'

	// jwts
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	//gson - json 메시지를 다루기 위한 라이브러리
	implementation 'com.google.code.gson:gson'

	// dto validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//oracle
//	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
//	implementation 'com.oracle.database.jdbc:ojdbc11'
}


tasks.named('test') {
	useJUnitPlatform()
}


def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "copyReactBuildFiles"

}

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}

